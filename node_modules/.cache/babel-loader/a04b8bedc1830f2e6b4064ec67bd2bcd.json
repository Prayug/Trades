{"ast":null,"code":"import { slice } from \"./array.js\";\nimport bisect from \"./bisect.js\";\nimport constant from \"./constant.js\";\nimport extent from \"./extent.js\";\nimport identity from \"./identity.js\";\nimport nice from \"./nice.js\";\nimport ticks, { tickIncrement } from \"./ticks.js\";\nimport sturges from \"./threshold/sturges.js\";\nexport default function bin() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n    var i,\n        n = data.length,\n        x,\n        step,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds, and nice the\n    // default domain accordingly.\n\n    if (!Array.isArray(tz)) {\n      const max = x1,\n            tn = +tz;\n      if (domain === extent) [x0, x1] = nice(x0, x1, tn);\n      tz = ticks(x0, x1, tn); // If the domain is aligned with the first tick (which it will by\n      // default), then we can use quantization rather than bisection to bin\n      // values, which is substantially faster.\n\n      if (tz[0] <= x0) step = tickIncrement(x0, x1, tn); // If the last threshold is coincident with the domain’s upper bound, the\n      // last bin will be zero-width. If the default domain is used, and this\n      // last threshold is coincident with the maximum input value, we can\n      // extend the niced upper bound by one tick to ensure uniform bin widths;\n      // otherwise, we simply remove the last threshold. Note that we don’t\n      // coerce values or the domain to numbers, and thus must be careful to\n      // compare order (>=) rather than strict equality (===)!\n\n      if (tz[tz.length - 1] >= x1) {\n        if (max >= x1 && domain === extent) {\n          const step = tickIncrement(x0, x1, tn);\n\n          if (isFinite(step)) {\n            if (step > 0) {\n              x1 = (Math.floor(x1 / step) + 1) * step;\n            } else if (step < 0) {\n              x1 = (Math.ceil(x1 * -step) + 1) / -step;\n            }\n          }\n        } else {\n          tz.pop();\n        }\n      }\n    } // Remove any thresholds outside the domain.\n    // Be careful not to mutate an array owned by the user!\n\n\n    var m = tz.length,\n        a = 0,\n        b = m;\n\n    while (tz[a] <= x0) ++a;\n\n    while (tz[b - 1] > x1) --b;\n\n    if (a || b < m) tz = tz.slice(a, b), m = b - a;\n    var bins = new Array(m + 1),\n        bin; // Initialize bins.\n\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    } // Assign data to bins by value, ignoring any outside the domain.\n\n\n    if (isFinite(step)) {\n      if (step > 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            bins[Math.min(m, Math.floor((x - x0) / step))].push(data[i]);\n          }\n        }\n      } else if (step < 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            const j = Math.floor((x0 - x) * step);\n            bins[Math.min(m, j + (tz[j] <= x))].push(data[i]); // handle off-by-one due to rounding\n          }\n        }\n      }\n    } else {\n      for (i = 0; i < n; ++i) {\n        if ((x = values[i]) != null && x0 <= x && x <= x1) {\n          bins[bisect(tz, x, 0, m)].push(data[i]);\n        }\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function (_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function (_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : constant(Array.isArray(_) ? slice.call(_) : _), histogram) : threshold;\n  };\n\n  return histogram;\n}","map":{"version":3,"sources":["/Users/prayugsigdel/Coding/Trades/node_modules/d3-array/src/bin.js"],"names":["slice","bisect","constant","extent","identity","nice","ticks","tickIncrement","sturges","bin","value","domain","threshold","histogram","data","Array","isArray","from","i","n","length","x","step","values","xz","x0","x1","tz","max","tn","isFinite","Math","floor","ceil","pop","m","a","b","bins","min","push","j","_","arguments","thresholds","call"],"mappings":"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","sourcesContent":["import {slice} from \"./array.js\";\nimport bisect from \"./bisect.js\";\nimport constant from \"./constant.js\";\nimport extent from \"./extent.js\";\nimport identity from \"./identity.js\";\nimport nice from \"./nice.js\";\nimport ticks, {tickIncrement} from \"./ticks.js\";\nimport sturges from \"./threshold/sturges.js\";\n\nexport default function bin() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n\n    var i,\n        n = data.length,\n        x,\n        step,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds, and nice the\n    // default domain accordingly.\n    if (!Array.isArray(tz)) {\n      const max = x1, tn = +tz;\n      if (domain === extent) [x0, x1] = nice(x0, x1, tn);\n      tz = ticks(x0, x1, tn);\n\n      // If the domain is aligned with the first tick (which it will by\n      // default), then we can use quantization rather than bisection to bin\n      // values, which is substantially faster.\n      if (tz[0] <= x0) step = tickIncrement(x0, x1, tn);\n\n      // If the last threshold is coincident with the domain’s upper bound, the\n      // last bin will be zero-width. If the default domain is used, and this\n      // last threshold is coincident with the maximum input value, we can\n      // extend the niced upper bound by one tick to ensure uniform bin widths;\n      // otherwise, we simply remove the last threshold. Note that we don’t\n      // coerce values or the domain to numbers, and thus must be careful to\n      // compare order (>=) rather than strict equality (===)!\n      if (tz[tz.length - 1] >= x1) {\n        if (max >= x1 && domain === extent) {\n          const step = tickIncrement(x0, x1, tn);\n          if (isFinite(step)) {\n            if (step > 0) {\n              x1 = (Math.floor(x1 / step) + 1) * step;\n            } else if (step < 0) {\n              x1 = (Math.ceil(x1 * -step) + 1) / -step;\n            }\n          }\n        } else {\n          tz.pop();\n        }\n      }\n    }\n\n    // Remove any thresholds outside the domain.\n    // Be careful not to mutate an array owned by the user!\n    var m = tz.length, a = 0, b = m;\n    while (tz[a] <= x0) ++a;\n    while (tz[b - 1] > x1) --b;\n    if (a || b < m) tz = tz.slice(a, b), m = b - a;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    if (isFinite(step)) {\n      if (step > 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            bins[Math.min(m, Math.floor((x - x0) / step))].push(data[i]);\n          }\n        }\n      } else if (step < 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            const j = Math.floor((x0 - x) * step);\n            bins[Math.min(m, j + (tz[j] <= x))].push(data[i]); // handle off-by-one due to rounding\n          }\n        }\n      }\n    } else {\n      for (i = 0; i < n; ++i) {\n        if ((x = values[i]) != null && x0 <= x && x <= x1) {\n          bins[bisect(tz, x, 0, m)].push(data[i]);\n        }\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : constant(Array.isArray(_) ? slice.call(_) : _), histogram) : threshold;\n  };\n\n  return histogram;\n}\n"]},"metadata":{},"sourceType":"module"}