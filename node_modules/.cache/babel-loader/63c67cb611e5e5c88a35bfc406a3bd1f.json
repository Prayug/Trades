{"ast":null,"code":"/**\n * Converts a Date Object to a UNIX timestamp\n * @param {Date} date - The Date Object to be converted\n * @param {number} unixTimestamp The corresponding UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC)\n */\nexport const convertDateToUnixTimestamp = date => {\n  return Math.floor(date.getTime() / 1000);\n};\n/**\n * Converts a UNIX timestamp to a Date\n * @param {number} unixTimestamp - UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC)\n * @returns {string} The corresponding Date Object formatted as a string\n */\n\nexport const convertUnixTimestampToDate = unixTimestamp => {\n  const milliseconds = unixTimestamp * 1000;\n  return new Date(milliseconds).toLocaleDateString();\n};\n/**\n * Creates a new date by adding days/weeks/months/years to a given date. Negative values will also work (for past dates)\n * @param {Date} date - The specified date\n * @param {number} days - The number (integer) of days to be added/subtracted\n * @param {number} weeks - The number (integer) of weeks to be added/subtracted\n * @param {number} months - The number (integer) of months to be added/subtracted\n * @param {number} years - The number (integer) of years to be added/subtracted\n * @returns {Date} The new date\n */\n\nexport const createDate = (date, days, weeks, months, years) => {\n  let newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + days + 7 * weeks);\n  newDate.setMonth(newDate.getMonth() + months);\n  newDate.setFullYear(newDate.getFullYear() + years);\n  return newDate;\n};","map":{"version":3,"sources":["/Users/prayugsigdel/Coding/Trades/src/utils/helpers/date-helper.js"],"names":["convertDateToUnixTimestamp","date","Math","floor","getTime","convertUnixTimestampToDate","unixTimestamp","milliseconds","Date","toLocaleDateString","createDate","days","weeks","months","years","newDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,0BAA0B,GAAIC,IAAD,IAAU;AAClD,SAAOC,IAAI,CAACC,KAAL,CAAWF,IAAI,CAACG,OAAL,KAAiB,IAA5B,CAAP;AACD,CAFM;AAIP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,0BAA0B,GAAIC,aAAD,IAAmB;AAC3D,QAAMC,YAAY,GAAGD,aAAa,GAAG,IAArC;AACA,SAAO,IAAIE,IAAJ,CAASD,YAAT,EAAuBE,kBAAvB,EAAP;AACD,CAHM;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG,CAACT,IAAD,EAAOU,IAAP,EAAaC,KAAb,EAAoBC,MAApB,EAA4BC,KAA5B,KAAsC;AAC9D,MAAIC,OAAO,GAAG,IAAIP,IAAJ,CAASP,IAAT,CAAd;AACAc,EAAAA,OAAO,CAACC,OAAR,CAAgBD,OAAO,CAACE,OAAR,KAAoBN,IAApB,GAA2B,IAAIC,KAA/C;AACAG,EAAAA,OAAO,CAACG,QAAR,CAAiBH,OAAO,CAACI,QAAR,KAAqBN,MAAtC;AACAE,EAAAA,OAAO,CAACK,WAAR,CAAoBL,OAAO,CAACM,WAAR,KAAwBP,KAA5C;AACA,SAAOC,OAAP;AACD,CANM","sourcesContent":["/**\n * Converts a Date Object to a UNIX timestamp\n * @param {Date} date - The Date Object to be converted\n * @param {number} unixTimestamp The corresponding UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC)\n */\nexport const convertDateToUnixTimestamp = (date) => {\n  return Math.floor(date.getTime() / 1000);\n};\n\n/**\n * Converts a UNIX timestamp to a Date\n * @param {number} unixTimestamp - UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC)\n * @returns {string} The corresponding Date Object formatted as a string\n */\nexport const convertUnixTimestampToDate = (unixTimestamp) => {\n  const milliseconds = unixTimestamp * 1000;\n  return new Date(milliseconds).toLocaleDateString();\n};\n\n/**\n * Creates a new date by adding days/weeks/months/years to a given date. Negative values will also work (for past dates)\n * @param {Date} date - The specified date\n * @param {number} days - The number (integer) of days to be added/subtracted\n * @param {number} weeks - The number (integer) of weeks to be added/subtracted\n * @param {number} months - The number (integer) of months to be added/subtracted\n * @param {number} years - The number (integer) of years to be added/subtracted\n * @returns {Date} The new date\n */\nexport const createDate = (date, days, weeks, months, years) => {\n  let newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + days + 7 * weeks);\n  newDate.setMonth(newDate.getMonth() + months);\n  newDate.setFullYear(newDate.getFullYear() + years);\n  return newDate;\n};\n"]},"metadata":{},"sourceType":"module"}