{"ast":null,"code":"/**\n * Converts a Date Object to a UNIX timestamp\n * @param {Date} date - The Date Object to be converted\n * @param {number} unixTimestamp The corresponding UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC)\n */\nexport const convertDateToUnixTimestamp = date => {\n  return Math.floor(date.getTime() / 1000);\n};\n\n/**\n * Converts a UNIX timestamp to a Date\n * @param {number} unixTimestamp - UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC)\n * @returns {string} The corresponding Date Object formatted as a string\n */\nexport const convertUnixTimestampToDate = unixTimestamp => {\n  const milliseconds = unixTimestamp * 1000;\n  return new Date(milliseconds).toLocaleDateString();\n};\n\n/**\n * Creates a new date by adding days/weeks/months/years to a given date. Negative values will also work (for past dates)\n * @param {Date} date - The specified date\n * @param {number} days - The number (integer) of days to be added/subtracted\n * @param {number} weeks - The number (integer) of weeks to be added/subtracted\n * @param {number} months - The number (integer) of months to be added/subtracted\n * @param {number} years - The number (integer) of years to be added/subtracted\n * @returns {Date} The new date\n */\nexport const createDate = (date, days, weeks, months, years) => {\n  let newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + days + 7 * weeks);\n  newDate.setMonth(newDate.getMonth() + months);\n  newDate.setFullYear(newDate.getFullYear() + years);\n  return newDate;\n};","map":{"version":3,"names":["convertDateToUnixTimestamp","date","Math","floor","getTime","convertUnixTimestampToDate","unixTimestamp","milliseconds","Date","toLocaleDateString","createDate","days","weeks","months","years","newDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear"],"sources":["/Users/prayugsigdel/Coding/Trades/src/utils/helpers/date-helper.js"],"sourcesContent":["/**\n * Converts a Date Object to a UNIX timestamp\n * @param {Date} date - The Date Object to be converted\n * @param {number} unixTimestamp The corresponding UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC)\n */\nexport const convertDateToUnixTimestamp = (date) => {\n  return Math.floor(date.getTime() / 1000);\n};\n\n/**\n * Converts a UNIX timestamp to a Date\n * @param {number} unixTimestamp - UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC)\n * @returns {string} The corresponding Date Object formatted as a string\n */\nexport const convertUnixTimestampToDate = (unixTimestamp) => {\n  const milliseconds = unixTimestamp * 1000;\n  return new Date(milliseconds).toLocaleDateString();\n};\n\n/**\n * Creates a new date by adding days/weeks/months/years to a given date. Negative values will also work (for past dates)\n * @param {Date} date - The specified date\n * @param {number} days - The number (integer) of days to be added/subtracted\n * @param {number} weeks - The number (integer) of weeks to be added/subtracted\n * @param {number} months - The number (integer) of months to be added/subtracted\n * @param {number} years - The number (integer) of years to be added/subtracted\n * @returns {Date} The new date\n */\nexport const createDate = (date, days, weeks, months, years) => {\n  let newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + days + 7 * weeks);\n  newDate.setMonth(newDate.getMonth() + months);\n  newDate.setFullYear(newDate.getFullYear() + years);\n  return newDate;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,0BAA0B,GAAIC,IAAI,IAAK;EAClD,OAAOC,IAAI,CAACC,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,0BAA0B,GAAIC,aAAa,IAAK;EAC3D,MAAMC,YAAY,GAAGD,aAAa,GAAG,IAAI;EACzC,OAAO,IAAIE,IAAI,CAACD,YAAY,CAAC,CAACE,kBAAkB,CAAC,CAAC;AACpD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGA,CAACT,IAAI,EAAEU,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,KAAK;EAC9D,IAAIC,OAAO,GAAG,IAAIP,IAAI,CAACP,IAAI,CAAC;EAC5Bc,OAAO,CAACC,OAAO,CAACD,OAAO,CAACE,OAAO,CAAC,CAAC,GAAGN,IAAI,GAAG,CAAC,GAAGC,KAAK,CAAC;EACrDG,OAAO,CAACG,QAAQ,CAACH,OAAO,CAACI,QAAQ,CAAC,CAAC,GAAGN,MAAM,CAAC;EAC7CE,OAAO,CAACK,WAAW,CAACL,OAAO,CAACM,WAAW,CAAC,CAAC,GAAGP,KAAK,CAAC;EAClD,OAAOC,OAAO;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}