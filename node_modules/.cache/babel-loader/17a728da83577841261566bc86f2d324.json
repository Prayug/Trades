{"ast":null,"code":"import { timeInterval } from \"./interval.js\";\nexport const millisecond = timeInterval(() => {// noop\n}, (date, step) => {\n  date.setTime(+date + step);\n}, (start, end) => {\n  return end - start;\n}); // An optimized implementation for this simple case.\n\nmillisecond.every = k => {\n  k = Math.floor(k);\n  if (!isFinite(k) || !(k > 0)) return null;\n  if (!(k > 1)) return millisecond;\n  return timeInterval(date => {\n    date.setTime(Math.floor(date / k) * k);\n  }, (date, step) => {\n    date.setTime(+date + step * k);\n  }, (start, end) => {\n    return (end - start) / k;\n  });\n};\n\nexport const milliseconds = millisecond.range;","map":{"version":3,"sources":["/Users/prayugsigdel/Coding/Trades/node_modules/d3-time/src/millisecond.js"],"names":["timeInterval","millisecond","date","step","setTime","start","end","every","k","Math","floor","isFinite","milliseconds","range"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,eAA3B;AAEA,OAAO,MAAMC,WAAW,GAAGD,YAAY,CAAC,MAAM,CAC5C;AACD,CAFsC,EAEpC,CAACE,IAAD,EAAOC,IAAP,KAAgB;AACjBD,EAAAA,IAAI,CAACE,OAAL,CAAa,CAACF,IAAD,GAAQC,IAArB;AACD,CAJsC,EAIpC,CAACE,KAAD,EAAQC,GAAR,KAAgB;AACjB,SAAOA,GAAG,GAAGD,KAAb;AACD,CANsC,CAAhC,C,CAQP;;AACAJ,WAAW,CAACM,KAAZ,GAAqBC,CAAD,IAAO;AACzBA,EAAAA,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWF,CAAX,CAAJ;AACA,MAAI,CAACG,QAAQ,CAACH,CAAD,CAAT,IAAgB,EAAEA,CAAC,GAAG,CAAN,CAApB,EAA8B,OAAO,IAAP;AAC9B,MAAI,EAAEA,CAAC,GAAG,CAAN,CAAJ,EAAc,OAAOP,WAAP;AACd,SAAOD,YAAY,CAAEE,IAAD,IAAU;AAC5BA,IAAAA,IAAI,CAACE,OAAL,CAAaK,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAGM,CAAlB,IAAuBA,CAApC;AACD,GAFkB,EAEhB,CAACN,IAAD,EAAOC,IAAP,KAAgB;AACjBD,IAAAA,IAAI,CAACE,OAAL,CAAa,CAACF,IAAD,GAAQC,IAAI,GAAGK,CAA5B;AACD,GAJkB,EAIhB,CAACH,KAAD,EAAQC,GAAR,KAAgB;AACjB,WAAO,CAACA,GAAG,GAAGD,KAAP,IAAgBG,CAAvB;AACD,GANkB,CAAnB;AAOD,CAXD;;AAaA,OAAO,MAAMI,YAAY,GAAGX,WAAW,CAACY,KAAjC","sourcesContent":["import {timeInterval} from \"./interval.js\";\n\nexport const millisecond = timeInterval(() => {\n  // noop\n}, (date, step) => {\n  date.setTime(+date + step);\n}, (start, end) => {\n  return end - start;\n});\n\n// An optimized implementation for this simple case.\nmillisecond.every = (k) => {\n  k = Math.floor(k);\n  if (!isFinite(k) || !(k > 0)) return null;\n  if (!(k > 1)) return millisecond;\n  return timeInterval((date) => {\n    date.setTime(Math.floor(date / k) * k);\n  }, (date, step) => {\n    date.setTime(+date + step * k);\n  }, (start, end) => {\n    return (end - start) / k;\n  });\n};\n\nexport const milliseconds = millisecond.range;\n"]},"metadata":{},"sourceType":"module"}