{"ast":null,"code":"const basePath = \"https://finnhub.io/api/v1\";\n/**\n * Searches best stock matches based on a user's query\n * @param {string} query - The user's query, e.g. 'fb'\n * @returns {Promise<Object[]>} Response array of best stock matches\n */\n\nexport const searchSymbol = async query => {\n  const url = `${basePath}/search?q=${query}&token=${process.env.REACT_APP_API_KEY}`;\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  return await response.json();\n};\n/**\n * Fetches the details of a given company\n * @param {string} stockSymbol - Symbol of the company, e.g. 'FB'\n * @returns {Promise<Object>} Response object\n */\n\nexport const fetchStockDetails = async stockSymbol => {\n  const url = `${basePath}/stock/profile2?symbol=${stockSymbol}&token=${process.env.REACT_APP_API_KEY}`;\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  return await response.json();\n};\n/**\n * Fetches the latest quote of a given stock\n * @param {string} stockSymbol - Symbol of the company, e.g. 'FB'\n * @returns {Promise<Object>} Response object\n */\n\nexport const fetchQuote = async stockSymbol => {\n  const url = `${basePath}/quote?symbol=${stockSymbol}&token=${process.env.REACT_APP_API_KEY}`;\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  return await response.json();\n};\n/**\n * Fetches historical data of a stock (to be displayed on a chart)\n * @param {string} stockSymbol - Symbol of the company, e.g. 'FB'\n * @param {string} resolution - Resolution of timestamps. Supported resolution includes: 1, 5, 15, 30, 60, D, W, M\n * @param {number} from - UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC). Interval initial value.\n * @param {number} to - UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC). Interval end value.\n * @returns {Promise<Object>} Response object\n */\n\nexport const fetchHistoricalData = async (stockSymbol, resolution, from, to) => {\n  const url = `${basePath}/stock/candle?symbol=${stockSymbol}&resolution=${resolution}&from=${from}&to=${to}&token=${process.env.REACT_APP_API_KEY}`;\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  return await response.json();\n};","map":{"version":3,"sources":["/Users/prayugsigdel/Coding/Trades/src/utils/api/stock-api.js"],"names":["basePath","searchSymbol","query","url","process","env","REACT_APP_API_KEY","response","fetch","ok","message","status","Error","json","fetchStockDetails","stockSymbol","fetchQuote","fetchHistoricalData","resolution","from","to"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAAjB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,KAAP,IAAiB;AAC3C,QAAMC,GAAG,GAAI,GAAEH,QAAS,aAAYE,KAAM,UAASE,OAAO,CAACC,GAAR,CAAYC,iBAAkB,EAAjF;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,CAA5B;;AAEA,MAAI,CAACI,QAAQ,CAACE,EAAd,EAAkB;AAChB,UAAMC,OAAO,GAAI,yBAAwBH,QAAQ,CAACI,MAAO,EAAzD;AACA,UAAM,IAAIC,KAAJ,CAAUF,OAAV,CAAN;AACD;;AAED,SAAO,MAAMH,QAAQ,CAACM,IAAT,EAAb;AACD,CAVM;AAYP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,WAAP,IAAuB;AACtD,QAAMZ,GAAG,GAAI,GAAEH,QAAS,0BAAyBe,WAAY,UAASX,OAAO,CAACC,GAAR,CAAYC,iBAAkB,EAApG;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,CAA5B;;AAEA,MAAI,CAACI,QAAQ,CAACE,EAAd,EAAkB;AAChB,UAAMC,OAAO,GAAI,yBAAwBH,QAAQ,CAACI,MAAO,EAAzD;AACA,UAAM,IAAIC,KAAJ,CAAUF,OAAV,CAAN;AACD;;AAED,SAAO,MAAMH,QAAQ,CAACM,IAAT,EAAb;AACD,CAVM;AAYP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,UAAU,GAAG,MAAOD,WAAP,IAAuB;AAC/C,QAAMZ,GAAG,GAAI,GAAEH,QAAS,iBAAgBe,WAAY,UAASX,OAAO,CAACC,GAAR,CAAYC,iBAAkB,EAA3F;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,CAA5B;;AAEA,MAAI,CAACI,QAAQ,CAACE,EAAd,EAAkB;AAChB,UAAMC,OAAO,GAAI,yBAAwBH,QAAQ,CAACI,MAAO,EAAzD;AACA,UAAM,IAAIC,KAAJ,CAAUF,OAAV,CAAN;AACD;;AAED,SAAO,MAAMH,QAAQ,CAACM,IAAT,EAAb;AACD,CAVM;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,mBAAmB,GAAG,OACjCF,WADiC,EAEjCG,UAFiC,EAGjCC,IAHiC,EAIjCC,EAJiC,KAK9B;AACH,QAAMjB,GAAG,GAAI,GAAEH,QAAS,wBAAuBe,WAAY,eAAcG,UAAW,SAAQC,IAAK,OAAMC,EAAG,UAAShB,OAAO,CAACC,GAAR,CAAYC,iBAAkB,EAAjJ;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,CAA5B;;AAEA,MAAI,CAACI,QAAQ,CAACE,EAAd,EAAkB;AAChB,UAAMC,OAAO,GAAI,yBAAwBH,QAAQ,CAACI,MAAO,EAAzD;AACA,UAAM,IAAIC,KAAJ,CAAUF,OAAV,CAAN;AACD;;AAED,SAAO,MAAMH,QAAQ,CAACM,IAAT,EAAb;AACD,CAfM","sourcesContent":["const basePath = \"https://finnhub.io/api/v1\";\n\n/**\n * Searches best stock matches based on a user's query\n * @param {string} query - The user's query, e.g. 'fb'\n * @returns {Promise<Object[]>} Response array of best stock matches\n */\nexport const searchSymbol = async (query) => {\n  const url = `${basePath}/search?q=${query}&token=${process.env.REACT_APP_API_KEY}`;\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  return await response.json();\n};\n\n/**\n * Fetches the details of a given company\n * @param {string} stockSymbol - Symbol of the company, e.g. 'FB'\n * @returns {Promise<Object>} Response object\n */\nexport const fetchStockDetails = async (stockSymbol) => {\n  const url = `${basePath}/stock/profile2?symbol=${stockSymbol}&token=${process.env.REACT_APP_API_KEY}`;\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  return await response.json();\n};\n\n/**\n * Fetches the latest quote of a given stock\n * @param {string} stockSymbol - Symbol of the company, e.g. 'FB'\n * @returns {Promise<Object>} Response object\n */\nexport const fetchQuote = async (stockSymbol) => {\n  const url = `${basePath}/quote?symbol=${stockSymbol}&token=${process.env.REACT_APP_API_KEY}`;\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  return await response.json();\n};\n\n/**\n * Fetches historical data of a stock (to be displayed on a chart)\n * @param {string} stockSymbol - Symbol of the company, e.g. 'FB'\n * @param {string} resolution - Resolution of timestamps. Supported resolution includes: 1, 5, 15, 30, 60, D, W, M\n * @param {number} from - UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC). Interval initial value.\n * @param {number} to - UNIX timestamp (seconds elapsed since January 1st, 1970 at UTC). Interval end value.\n * @returns {Promise<Object>} Response object\n */\nexport const fetchHistoricalData = async (\n  stockSymbol,\n  resolution,\n  from,\n  to\n) => {\n  const url = `${basePath}/stock/candle?symbol=${stockSymbol}&resolution=${resolution}&from=${from}&to=${to}&token=${process.env.REACT_APP_API_KEY}`;\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    const message = `An error has occured: ${response.status}`;\n    throw new Error(message);\n  }\n\n  return await response.json();\n};"]},"metadata":{},"sourceType":"module"}